import tkinter as tk
from tkinter import messagebox, simpledialog
import json
import os

# Function to load notes from the JSON file
def load_notes():
    if os.path.exists("notes.json"):
        with open("notes.json", "r") as file:
            return json.load(file)
    return []

# Function to save notes to the JSON file
def save_notes(notes):
    with open("notes.json", "w") as file:
        json.dump(notes, file, indent=4)
    
# Function to edit a selected note
def edit_note():
    selected_note = notes_listbox.curselection()
    if selected_note:
        note_index = selected_note[0]
        current_note = notes[note_index]
        new_text = simpledialog.askstring("Edit Note", "Edit your note:", initialvalue=current_note)
        if new_text:
            notes[note_index] = new_text
            save_notes(notes)
            update_notes_list()

# Function to add a new note
def add_note():
    note_text = simpledialog.askstring("New Note", "Enter your note:")
    
    if note_text:
        notes.append(note_text)
        save_notes(notes)
        
        update_notes_list()

# Function to delete a selected note
def delete_note():
    selected_note = notes_listbox.curselection()
    if selected_note:
        notes.pop(selected_note[0])
        save_notes(notes)
        update_notes_list()
# Function to view a selected note in a new window
def view_note():
    selected_note = notes_listbox.curselection()
    if selected_note:
        note_text = notes[selected_note[0]]
        view_window = tk.Toplevel(app)
        view_window.title("View Note")
        view_window.geometry("400x400")
        view_window.configure(bg="#806371")  # Set background color

        # Add a title label
        title_label = tk.Label(view_window, text="Note Details", font=("Times", 14, "bold"), bg="#806371")
        title_label.pack(pady=10)

        # Add a frame for the note content
        note_frame = tk.Frame(view_window, bg="#788063", bd=2, relief="solid")
        note_frame.pack(padx=20, pady=10, fill="both", expand=True)

        # Display the note text
        note_label = tk.Label(note_frame, text=note_text, wraplength=300, justify="left", bg="#788063", font=("Times", 12))
        note_label.pack(padx=10, pady=10)

        # Add a close button
        close_button = tk.Button(view_window, text="Close", command=view_window.destroy, bg="#007acc", fg="white", font=("Times", 10))
        close_button.pack(pady=10)

# Function to update the notes list displayed in the Listbox
def update_notes_list():
    notes_listbox.delete(0, tk.END)
    for note in notes:
        notes_listbox.insert(tk.END, note)

# Main Application
app = tk.Tk()
app.title("Note Making App")
app.geometry("700x700")

# Load existing notes
notes = load_notes()

# Listbox to display notes
notes_listbox = tk.Listbox(app, width=80, height=30,bg='#d1c328')
notes_listbox.pack(padx=100,pady=20)

# Buttons for adding, viewing, and deleting notes
button_frame = tk.Frame(app)
button_frame.pack()

add_button = tk.Button(button_frame, text="Add Note", command=add_note,bg="#007acc", fg="black", font=("Times", 10, "bold"))
add_button.pack(side=tk.LEFT, padx=10)

view_button = tk.Button(button_frame, text="View Note", command=view_note ,bg="#007acc",fg="black", font=("Times", 10, "bold"))
view_button.pack(side=tk.LEFT, padx=10)

delete_button = tk.Button(button_frame, text="Delete Note", command=delete_note,bg="#007acc", fg="black", font=("Times", 10, "bold"))
delete_button.pack(side=tk.LEFT, padx=10)

edit_button = tk.Button(button_frame, text="Edit Note", command=edit_note,bg="#007acc", fg="black", font=("Times", 10, "bold"))
edit_button.pack(side=tk.LEFT, padx=10)
# Display existing notes
update_notes_list()

# Run the application
app.mainloop()
